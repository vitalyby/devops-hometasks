- hosts: jenkins.vm
  become: yes

  vars:
    url_username: admin
    url: 192.168.33.60:8080
    admin_user_pass: admin
    url_json : 'json={ 
              "": "0", 
              "credentials": { 
                "scope": "GLOBAL", 
                "id": "vagrant_upload",  
                "username": "vagrant", 
                "password": "vagrant", 
                "description": "vagrant upload", 
                "stapler-class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl" 
                }}'

  tasks:
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install required system packages
      apt:
        pkg:
          - python3-pip
          - virtualenv
          - mc
          - vim
          - fontconfig
          - openjdk-11-jre          
        state: latest
        update_cache: true

    # - name: Add Docker GPG apt Key
    #   apt_key:
    #     url: https://download.docker.com/linux/ubuntu/gpg
    #     state: present

    # - name: Add Docker Repository
    #   apt_repository:
    #     repo: deb https://download.docker.com/linux/ubuntu focal stable
    #     state: present

    # - name: Update apt and install docker-ce
    #   apt:
    #     name: docker-ce
    #     state: latest
    #     update_cache: true

    # - name: Install Docker Module for Python
    #   pip:
    #     name: docker      

    - name: Install python-jenkins
      pip:
        name: python-jenkins   

    - name: group ubuntu
      ansible.builtin.group:
        name: ubuntu
        state: present

    - name: Add the user ubuntu
      ansible.builtin.user:
        name: ubuntu
        comment: ubuntu
        groups: ubuntu #,docker
        append: yes        
                
    # - name: ansible-galaxy install emmetog.jenkins 
    #   ansible.builtin.shell:  /usr/bin/ansible-galaxy install emmetog.jenkins

    # - name: edit config /root/.ansible/roles/emmetog.jenkins/tasks/docker/install.yml
    #   ansible.builtin.replace:
    #     path: /root/.ansible/roles/emmetog.jenkins/tasks/docker/install.yml
    #     regexp: '^  when: container_result\|changed$'
    #     replace: '  when: container_result is changed'

    # - name: edit config /root/.ansible/roles/emmetog.jenkins/defaults/main.yml
    #   ansible.builtin.replace:
    #     path: /root/.ansible/roles/emmetog.jenkins/defaults/main.yml
    #     regexp: '^jenkins_java_opts: "-Djenkins.install.runSetupWizard=false"$'
    #     replace: 'jenkins_java_opts: "-Djenkins.install.runSetupWizard=false -Xms256m -Xmx748m"'        

    # - name: Add row in /root/.ansible/roles/emmetog.jenkins/tasks/configure-jenkins.yml
    #   ansible.builtin.lineinfile:
    #     path: /root/.ansible/roles/emmetog.jenkins/tasks/configure-jenkins.yml
    #     regexp: '^--httpsPort=$HTTPS_PORT '
    #     line: "    create: yes"

    - name: Jenkins key
      get_url:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        dest: /usr/share/keyrings/jenkins-keyring.asc

    - name: Jenkins repo
      ansible.builtin.shell: echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
                             https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
                             /etc/apt/sources.list.d/jenkins.list > /dev/null                            

    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install jenkins
      apt:
        name: jenkins
        state: latest

    - name: Jenkins Skip startUp for MI
      lineinfile:
        dest=/usr/lib/systemd/system/jenkins.service
        regexp='^Environment="JAVA_OPTS=-Djava.awt.headless=true"$'
        line='Environment="JAVA_OPTS=-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false -Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true"'

    - name: daemon-reload to pick up config changes
      ansible.builtin.systemd:
        daemon_reload: yes
    
    - name: Start jenkins
      ansible.builtin.systemd:
        name: jenkins
        state: started

    # - name: apply emmetog.jenkins 
    #   ansible.builtin.shell:  /usr/bin/ansible-playbook /vagrant/jenkins_playbook.yaml -i inventory

    - name: read admin pwd
      shell: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: adminpwd

    - name: unlock and add admin user
      jenkins_script:
        script: |
          import jenkins.model.*
          import hudson.security.*
          def instance = Jenkins.getInstance()
          def hudsonRealm = new HudsonPrivateSecurityRealm(false)
          hudsonRealm.createAccount('jenkins', '${user_pwd}')
          instance.setSecurityRealm(hudsonRealm)
          def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
          strategy.setAllowAnonymousRead(false)
          instance.setAuthorizationStrategy(strategy)
          instance.save()
        args:
          user_pwd: "{{ admin_user_pass }}"
        user: "{{ url_username }}"
        password: "{{ adminpwd.stdout }}"

    - name: complete setup wizard
      jenkins_script:
        script: |
          import static jenkins.model.Jenkins.instance as jenkins
          import jenkins.install.InstallState
          if (!jenkins.installState.isSetupComplete()) {
            InstallState.INITIAL_SETUP_COMPLETED.initializeState()
          }
        user: "{{ url_username }}"
        password: "{{ adminpwd.stdout }}"      
          
    - name: Install plugin git
      jenkins_plugin:
        name: git
        timeout: 300
        url: "http://{{ url }}"
        url_username: "{{ url_username }}"
        url_password: "{{ adminpwd.stdout }}"

    - name: Install plugin configuration-as-code
      jenkins_plugin:
        name: configuration-as-code
        timeout: 300
        url: "http://{{ url }}"
        url_username: "{{ url_username }}"
        url_password: "{{ adminpwd.stdout }}"

    - name: Create a jenkins job
      community.general.jenkins_job:
        config: "{{ lookup('file', '/vagrant/jenkins-configs/jobs/my-first-job/config.xml') }}"
        name: test
        password: "{{ adminpwd.stdout }}"
        url: "http://{{ url }}"
        user: "{{ url_username }}"

    # - name: Prepare a jenkins credentials
    #   uri:
    #     url: 'http://{{ url }}/crumbIssuer/api/json'
    #     user: "{{ url_username }}"
    #     password: "{{ adminpwd.stdout }}"
    #     force_basic_auth: yes
    #     return_content: yes
    #     headers:
    #       Cookie: /tmp/cookies      
    #   register: crumb

    - name: Get crumb
      shell: "curl -s --cookie-jar /tmp/cookies http://{{ url }}/crumbIssuer/api/json -u {{ url_username }}:{{ adminpwd.stdout }}"
      register: result

    - name: debug crumb
      debug:
        msg: "{{ result }}"            

    # - name: debug crumb2
    #   debug:
    #     msg: "{{ result.stdout }}"           

    # - name: generateNewToken
    #   shell: "curl -X POST http://{{ url }}/me/descriptorByName/jenkins.security.ApiTokenProperty/generateNewToken?newTokenName=\newtoken -u {{ url_username }}:{{ adminpwd.stdout }} --cookie /tmp/cookies \
    #          -H 'Jenkins-Crumb:{{ crumb.stdout.crumb }}'"
    #   register: newtoken        

    # - name: debug
    #   debug:
    #     msg: "{{ newtoken.tokenValue }}"        

    - name: debug
      debug:
        msg: "Jenkins url http://{{ url }}, user {{ url_username }}, pass {{adminpwd.stdout}}"

    # - name: Create a jenkins credentials
    #   shell: "curl -X POST -H 'Jenkins-Crumb:{{ crumb.json.crumb }}' 'http://{{ url }}/credentials/store/system/domain/_/createCredentials' \ 
    #           --user {{ url_username }}:{{ adminpwd.stdout }} --data-urlencode '{{ url_json }}'"    


# curl 192.168.33.60:8080/crumbIssuer/api/json -u admin:admin -c cookies.txt

# curl 192.168.33.60:8080/user/admin/descriptorByName/jenkins.security.ApiTokenProperty/generateNewToken --data 'newTokenName=newtoken' -u admin:admin -H "Jenkins-Crumb:d1a5b2707bc1747f4311a39e814786cc6d7bbd3ea91cc6f6f47a9dda8b5de086" -b cookies.txt

# curl -X POST 192.168.33.60:8080/job/dockertest/build -u admin:1150d49c2ad0946b1651e4a464f582adb5